@using PagedList.Mvc;
@using PagedList;
@model IPagedList<task_2._0.Models.Register>

@{
    ViewBag.Title = "GetDetails";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
    <link href="~/Content/StyleSheet1.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.7.1.js"></script>
    @*<link href="~/Views/_PartialPage1.cshtml" />*@

    <script src="~/Scripts/umd/popper.js"></script>
    <script src="~/Scripts/bootstrap.js"></script>
}

<h2>GetDetails</h2>


<form method="get" action="@Url.Action("GetDetails", "Book", FormMethod.Get)">




    @*<div class="form-group">
            @Html.Label("Filter by Country:")
            @Html.DropDownList("CountryId", new SelectList(Model.Select(x => x.CountryId).Distinct()), "All", new { @class = "form-control" })
        </div>*@
    <div class="form-group">
        @Html.Label("Filter by Country:")
        @Html.DropDownList("CountryId", ViewBag.CountryIdList as SelectList, "All", new { @class = "form-control" })
    </div>

    <button type="submit" class="btn btn-primary">Filter</button>






    <div class="form-group">
        <label for="searchName">Search by Name:</label>
        <input type="text" class="form-control" id="searchName" name="searchString" placeholder="Enter name">
    </div>
    <button type="submit" class="btn btn-primary">Search</button>
</form>

<body>
    @*<div class="@TempData["value"]"
             <p>
                 @Html.(model=>model.Name)
             </p>
        </div>*@
    <p>
        @Html.ActionLink("Create New", "Register")
    </p>
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.First().Name)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.First().Email)
            </th>

            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                @*<td>
                        @Html.DisplayFor(modelItem => item.Password)
                    </td>

                    <td>
                        @Html.DisplayFor(modelItem => item.Phone)
                    </td>*@
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                @*<td>
                        @Html.DisplayFor(modelItem => item.CountryId)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Gender)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Hobbies)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DateOfBirth)
                    </td>*@
                <td>
                    @Html.ActionLink("Edit", "Edit", new { Id = item.Id }) |
                    @Html.ActionLink("ViewDetails", "ViewDetails", new { Id = item.Id, isPartial = true }) |


                    @Html.ActionLink("Delete", "Delete", new { Id = item.Id }, new { @class = "delete-link", data_Id = item.Id })
                </td>

            </tr>

        }

    </table>
    @*@if (Model.PageCount > 1)
        {
            Page @(Model.PageCount< Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page, filter = ViewBag.Filter }))
            }*@
 

    <div class="pagination-container" id="pagenumber">
        @if (Model.PageCount >= 1)
        {
            @*<span>Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</span>*@
            Html.PagedListPager(Model, page => Url.Action("GetDetails", new
       {
           //Page (Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
           page,



           searchString = Request.QueryString["searchString"],
           CountryId = Request.QueryString["CountryId"],
           //currentFilter = ViewBag.CurrentFilter
       }),
                 new PagedListRenderOptions
                 {
                     Display = PagedListDisplayMode.IfNeeded,
                     DisplayPageCountAndCurrentLocation = true,
                     DisplayItemSliceAndTotal = true,
                     UlElementClasses = new[] { "pagination" } // Add a class to the <ul> element
                 })
        }

    </div>

    @*<div class="pagination-container" id="pagenumber">
        @if (Model.PageCount > 1)
         {
             Page @(Model.PageCount< Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
             @Html.PagedListPager(Model, Page => Url.Action("GetDetails", new
        {
            Page,
            searchString = Request.QueryString["searchString"],
            CountryId = Request.QueryString["CountryId"],
        }),
               new PagedListRenderOptions
                  {
                      Display = PagedListDisplayMode.IfNeeded,
                 DisplayPageCountAndCurrentLocation = true,
                 DisplayItemSliceAndTotal = true,
                 UlElementClasses = new[] { "pagination" } // Add a class to the <ul> element
             })
         </div>*@

    @*<div>
             @Html.PagedListPager(Model, Page => Url.Action("GetDetails", new
        {
            Page,
            searchString = Request.QueryString["searchString"],
            CountryId = Request.QueryString["CountryId"],
        }),
              new PagedListRenderOptions()
              {
                  Display = PagedListDisplayMode.IfNeeded,
                       DisplayPageCountAndCurrentLocation = true,
                       DisplayItemSliceAndTotal = true
              }

             )

         </div>*@


    <div class="logout-link">
        @Html.ActionLink("Logout", "Logout")
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const deleteLinks = document.querySelectorAll(".delete-link");
            deleteLinks.forEach(link => {
                link.addEventListener("click", function (event) {
                    event.preventDefault();
                    const Id = this.getAttribute("data-Id");

                    confirmDelete(Id);
                });
            });
        });
        //function page(pazeSize, pageNumber) {

        //}

        function confirmDelete(id) {
            const url = `/Book/Delete/${id}`;
            Swal.fire({
                title: 'Are you sure?',
                text: "Want To Delete This",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Redirect to the delete action
                    window.location.href = url;
                } else {
                    Swal.fire(
                        'Cancelled',
                        'The Student is safe :)',
                        'error'
                    )
                }
            });
        }
    </script>
</body>


